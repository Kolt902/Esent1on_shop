// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Railway —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è production
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NODE_ENV –≤ production
process.env.NODE_ENV = 'production';

try {
  console.log('üì¶ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ –¥–ª—è Railway...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é Vite
  console.log('üèóÔ∏è –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ —Å Vite...');
  execSync('npx vite build', { stdio: 'inherit' });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(resolve(__dirname, 'dist'))) {
    fs.mkdirSync(resolve(__dirname, 'dist'));
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª index.js - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Vite
  const serverCode = `
/**
 * –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Vite
 */

import express from 'express';
import http from 'http';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';
import { Pool } from '@neondatabase/serverless';
import ws from 'ws';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 8080;
process.env.NODE_ENV = 'production';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NeonDB
import { neonConfig } from '@neondatabase/serverless';
neonConfig.webSocketConstructor = ws;

// –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
console.log('===== RAILWAY SERVER =====');
console.log('Working directory: ' + process.cwd());
console.log('NODE_ENV: ' + process.env.NODE_ENV);
console.log('PORT: ' + PORT);
console.log('DATABASE_URL available: ' + !!process.env.DATABASE_URL);
console.log('TELEGRAM_BOT_TOKEN available: ' + !!process.env.TELEGRAM_BOT_TOKEN);

// –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
console.log('Files in current directory:');
try {
  const files = fs.readdirSync(process.cwd());
  files.forEach(file => {
    console.log(\`- \${file}\`);
  });
} catch (err) {
  console.error('Error listing directory:', err);
}

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
app.use(express.json());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è Railway
app.get('/healthcheck', (req, res) => {
  res.json({ status: 'ok' });
});

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const httpServer = createServer(app);

// –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocketServer({ server: httpServer, path: '/ws' });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
wss.on('connection', (socket) => {
  console.log('WebSocket client connected');
  
  socket.on('message', (message) => {
    try {
      const data = JSON.parse(message.toString());
      console.log('Received WebSocket message:', data);
      
      // –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ –æ–±—Ä–∞—Ç–Ω–æ
      if (socket.readyState === WebSocketServer.OPEN) {
        socket.send(JSON.stringify({ 
          type: 'echo', 
          data: data,
          timestamp: new Date().toISOString()
        }));
      }
    } catch (error) {
      console.error('Error processing WebSocket message:', error);
    }
  });
  
  socket.on('close', () => {
    console.log('WebSocket client disconnected');
  });
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤

// 1. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
app.get('/api/categories', async (req, res) => {
  try {
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    const client = await pool.connect();
    const result = await client.query(\`
      SELECT DISTINCT category FROM products ORDER BY category
    \`);
    const categories = result.rows.map(row => row.category);
    client.release();
    res.json({ categories });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// 2. –ë—Ä–µ–Ω–¥—ã
app.get('/api/brands', async (req, res) => {
  try {
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    const client = await pool.connect();
    const result = await client.query(\`
      SELECT DISTINCT brand FROM products ORDER BY brand
    \`);
    const brands = result.rows.map(row => row.brand);
    client.release();
    res.json({ brands });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// 3. –°—Ç–∏–ª–∏
app.get('/api/styles', async (req, res) => {
  try {
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    const client = await pool.connect();
    const result = await client.query(\`
      SELECT DISTINCT unnest(style) as style FROM products ORDER BY style
    \`);
    const styles = result.rows.map(row => row.style);
    client.release();
    res.json({ styles });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–ª–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// 4. –¢–æ–≤–∞—Ä—ã
app.get('/api/products', async (req, res) => {
  try {
    const { category, brand, style, gender } = req.query;
    
    console.log(\`API –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: –∫–∞—Ç–µ–≥–æ—Ä–∏—è=\${category}, –±—Ä–µ–Ω–¥=\${brand}, —Å—Ç–∏–ª—å=\${style}, –ø–æ–ª=\${gender}\`);
    
    let query = 'SELECT * FROM products';
    const conditions = [];
    const params = [];
    
    if (category) {
      conditions.push('category = $' + (params.length + 1));
      params.push(category);
    }
    
    if (brand) {
      conditions.push('brand = $' + (params.length + 1));
      params.push(brand);
    }
    
    if (style) {
      conditions.push('style @> ARRAY[$' + (params.length + 1) + ']::text[]');
      params.push(style);
    }
    
    if (gender) {
      conditions.push('gender = $' + (params.length + 1));
      params.push(gender);
    }
    
    if (conditions.length > 0) {
      query += ' WHERE ' + conditions.join(' AND ');
    }
    
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    const client = await pool.connect();
    const result = await client.query(query, params);
    client.release();
    
    res.json({ products: result.rows });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// 5. –û–¥–∏–Ω —Ç–æ–≤–∞—Ä
app.get('/api/products/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    const client = await pool.connect();
    const result = await client.query('SELECT * FROM products WHERE id = $1', [id]);
    client.release();
    
    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ product: result.rows[0] });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// 6. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram
app.post('/api/auth/telegram', async (req, res) => {
  try {
    const { telegramData } = req.body;
    
    if (!telegramData) {
      return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ Telegram' });
    }
    
    // –í production –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    res.json({ 
      success: true, 
      user: { 
        id: 1, 
        username: telegramData.username || 'user', 
        isAdmin: false 
      } 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
app.get('/api/telegram/bot-info', async (req, res) => {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      return res.status(500).json({ error: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
    }
    
    try {
      const response = await fetch(\`https://api.telegram.org/bot\${token}/getMe\`);
      const data = await response.json();
      
      if (data.ok) {
        const { id, first_name, username, can_join_groups, can_read_all_group_messages } = data.result;
        res.json({ 
          success: true, 
          bot: { 
            id, 
            name: first_name, 
            username, 
            can_join_groups, 
            can_read_all_group_messages 
          } 
        });
      } else {
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ', details: data.description });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Telegram:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)
app.get('/api/admin/check', (req, res) => {
  res.json({ isAdmin: false });
});

// –†–∞–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'public'
const publicDir = path.resolve(__dirname, 'public');
app.use(express.static(publicDir));

// –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–¥–∞–µ–º index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(publicDir, 'index.html'));
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseConnection() {
  try {
    if (!process.env.DATABASE_URL) {
      console.error('DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL.');
      return false;
    }
    
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const pool = new Pool({ connectionString: process.env.DATABASE_URL });
    
    const client = await pool.connect();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    const tableCheck = await client.query(\`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'users'
      );
    \`);
    
    if (tableCheck.rows[0].exists) {
      console.log('–¢–∞–±–ª–∏—Ü–∞ users –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
    } else {
      console.warn('–í–Ω–∏–º–∞–Ω–∏–µ: —Ç–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
    }
    
    client.release();
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
async function startServer() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await checkDatabaseConnection();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  httpServer.listen(PORT, '0.0.0.0', () => {
    console.log(\`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ \${process.env.NODE_ENV} —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É \${PORT}\`);
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway');
  });
}

startServer();
`;

  fs.writeFileSync(resolve(__dirname, 'dist/index.js'), serverCode);
  
  console.log('‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error);
  process.exit(1);
}