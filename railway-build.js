// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Railway
// –ó–∞–º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ 'npm run build' –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NODE_ENV –≤ production
process.env.NODE_ENV = 'production';

try {
  console.log('üì¶ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏ –¥–ª—è Railway...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é Vite
  console.log('üèóÔ∏è –°–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ —Å Vite...');
  execSync('npx vite build', { stdio: 'inherit' });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(resolve(__dirname, 'dist'))) {
    fs.mkdirSync(resolve(__dirname, 'dist'));
  }
  
  // –ö–æ–ø–∏—Ä—É–µ–º server/index.ts –≤ dist/index.js —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  console.log('üîÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ server/index.ts –≤ dist/index.js...');
  const serverCode = fs.readFileSync(resolve(__dirname, 'server/index.ts'), 'utf8');
  
  // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —Å –∞–ª–∏–∞—Å–∞–º–∏ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
  const transformedCode = serverCode
    .replace(/from\s+["']@shared\/(.*?)["']/g, 'from "../shared/$1"')
    .replace(/from\s+["']@server\/(.*?)["']/g, 'from "./$1"')
    .replace(/\.ts["']/g, '.js"');
  
  fs.writeFileSync(resolve(__dirname, 'dist/index.js'), transformedCode);
  
  // –ö–æ–ø–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Ä–≤–µ—Ä–∞
  console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  const serverFiles = [
    'routes.ts',
    'storage.ts',
    'telegram.ts',
    'vite.ts',
    'dbStorage.ts',
    'db.ts',
    'middleware.ts',
    'healthcheck.ts'
  ];
  
  serverFiles.forEach(file => {
    const content = fs.readFileSync(resolve(__dirname, `server/${file}`), 'utf8');
    const transformed = content
      .replace(/from\s+["']@shared\/(.*?)["']/g, 'from "../shared/$1"')
      .replace(/from\s+["']@server\/(.*?)["']/g, 'from "./$1"')
      .replace(/\.ts["']/g, '.js"');
    
    fs.writeFileSync(resolve(__dirname, `dist/${file.replace('.ts', '.js')}`), transformed);
  });
  
  // –ö–æ–ø–∏—Ä—É–µ–º shared –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ shared –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...');
  if (!fs.existsSync(resolve(__dirname, 'dist/shared'))) {
    fs.mkdirSync(resolve(__dirname, 'dist/shared'));
  }
  
  const sharedFiles = [
    'schema.ts',
  ];
  
  sharedFiles.forEach(file => {
    const content = fs.readFileSync(resolve(__dirname, `shared/${file}`), 'utf8');
    const transformed = content
      .replace(/\.ts["']/g, '.js"');
    
    fs.writeFileSync(resolve(__dirname, `dist/shared/${file.replace('.ts', '.js')}`), transformed);
  });
  
  console.log('‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error);
  process.exit(1);
}