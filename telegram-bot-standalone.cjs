/**
 * Standalone Telegram Bot Server –¥–ª—è Railway
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∫—Ä–æ–º–µ Node.js stdlib
 */

const http = require('http');
const https = require('https');
const querystring = require('querystring');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = process.env.PORT || 8080;
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://esentioshop-production-up.up.railway.app';

console.log(`=== TELEGRAM BOT STANDALONE SERVER ===`);
console.log(`–ü–æ—Ä—Ç: ${PORT}`);
console.log(`–¢–æ–∫–µ–Ω –±–æ—Ç–∞: ${BOT_TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
console.log(`Web App URL: ${WEB_APP_URL}`);

// –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
function callTelegramApi(method, params = {}) {
  return new Promise((resolve, reject) => {
    if (!BOT_TOKEN) {
      console.error(`–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
      reject(new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
      return;
    }

    const data = querystring.stringify(params);
    
    const options = {
      hostname: 'api.telegram.org',
      port: 443,
      path: `/bot${BOT_TOKEN}/${method}`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': data.length
      }
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(responseData);
          resolve(response);
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`));
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–µ–Ω—é
async function setupBotCommands() {
  try {
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...');
    
    const commands = [
      { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' },
      { command: 'help', description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
      { command: 'shop', description: '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' }
    ];
    
    const result = await callTelegramApi('setMyCommands', {
      commands: JSON.stringify(commands)
    });
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', result);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:', error);
    return null;
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async function setupMenuButton() {
  try {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é...');
    
    const result = await callTelegramApi('setChatMenuButton', {
      menu_button: JSON.stringify({
        type: 'web_app',
        text: '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
        web_app: { url: WEB_APP_URL }
      })
    });
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', result);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', error);
    return null;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleUpdate(update) {
  if (!update || !update.message) return;
  
  const { message } = update;
  const chatId = message.chat.id;
  
  console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.from.username || message.from.first_name}: ${message.text}`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  if (message.text === '/start' || message.text === '/shop') {
    await callTelegramApi('sendMessage', {
      chat_id: chatId,
      text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Esention Store! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω.',
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
              web_app: { url: WEB_APP_URL }
            }
          ]
        ]
      })
    });
  } 
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  else if (message.text === '/help') {
    await callTelegramApi('sendMessage', {
      chat_id: chatId,
      text: 'Esention Store - –º–æ–¥–Ω—ã–π –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/shop - –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\n/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É'
    });
  }
  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  else {
    await callTelegramApi('sendMessage', {
      chat_id: chatId,
      text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /shop, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω.'
    });
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API
async function checkTelegramApi() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...');
    
    const result = await callTelegramApi('getMe');
    
    if (result && result.ok) {
      console.log(`–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ò–º—è: ${result.result.first_name}, Username: @${result.result.username}`);
      return true;
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:', result);
      return false;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram API:', error);
    return false;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
async function deleteWebhook() {
  try {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞...');
    const result = await callTelegramApi('deleteWebhook');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞:', result);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞:', error);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫ long polling
async function startPolling() {
  console.log('–ó–∞–ø—É—Å–∫ Long Polling...');
  
  let offset = 0;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  async function getUpdates() {
    try {
      const updates = await callTelegramApi('getUpdates', {
        offset,
        timeout: 30,
        allowed_updates: JSON.stringify(['message', 'callback_query'])
      });
      
      if (updates && updates.ok && updates.result.length > 0) {
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${updates.result.length} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        for (const update of updates.result) {
          await handleUpdate(update);
          offset = update.update_id + 1;
        }
      }
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
      setTimeout(getUpdates, 1000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      setTimeout(getUpdates, 5000);
    }
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  getUpdates();
}

// HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
  const url = req.url;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è Railway
  if (url === '/healthcheck') {
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ status: 'ok' }));
    return;
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  res.writeHead(200, { 'Content-Type': 'text/html' });
  res.end(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Esention Store - Telegram Bot</title>
      <style>
        body {
          font-family: 'Arial', sans-serif;
          line-height: 1.6;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
          color: #333;
        }
        h1 {
          color: #000;
          border-bottom: 1px solid #eee;
          padding-bottom: 10px;
        }
        .info {
          background: #f5f5f5;
          padding: 20px;
          border-radius: 8px;
          margin-bottom: 20px;
        }
        .success {
          color: green;
          font-weight: bold;
        }
        .error {
          color: red;
          font-weight: bold;
        }
        a {
          display: inline-block;
          background: #4CAF50;
          color: white;
          text-decoration: none;
          padding: 10px 15px;
          border-radius: 4px;
          margin-top: 10px;
        }
      </style>
    </head>
    <body>
      <h1>Esention Store - Telegram Bot</h1>
      
      <div class="info">
        <p><strong>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</strong> <span class="success">–†–∞–±–æ—Ç–∞–µ—Ç</span></p>
        <p><strong>–ü–æ—Ä—Ç:</strong> ${PORT}</p>
        <p><strong>–†–µ–∂–∏–º:</strong> ${process.env.NODE_ENV || 'development'}</p>
        <p><strong>–¢–æ–∫–µ–Ω –±–æ—Ç–∞:</strong> ${BOT_TOKEN ? '<span class="success">–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span>' : '<span class="error">–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</span>'}</p>
        <p><strong>WebApp URL:</strong> ${WEB_APP_URL}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
      </div>
      
      <p>–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç Telegram-–±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ Esention Store. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ Long Polling –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞.</p>
      
      <p>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.</p>
      
      <a href="/healthcheck">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</a>
    </body>
    </html>
  `);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initBot() {
  if (!BOT_TOKEN) {
    console.warn('–í–ù–ò–ú–ê–ù–ò–ï: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
    return;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
    const apiAvailable = await checkTelegramApi();
    
    if (!apiAvailable) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å long polling
    await deleteWebhook();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
    await setupBotCommands();
    await setupMenuButton();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º long polling
    startPolling();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
server.listen(PORT, '0.0.0.0', () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  initBot();
});