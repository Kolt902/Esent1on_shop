/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Production
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Ç—è–º–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤ ESM
 */

import { exec } from 'child_process';
import fs from 'fs/promises';
import path from 'path';

// –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
const ROOT_DIR = path.resolve(process.cwd());

async function build() {
  // –®–∞–≥ 1: –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ —Å esbuild
  console.log('‚öôÔ∏è Building server with esbuild...');
  
  const esbuildCommand = 'esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist';
  
  await new Promise((resolve, reject) => {
    exec(esbuildCommand, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error during esbuild: ${error}`);
        return reject(error);
      }
      if (stderr) console.error(stderr);
      if (stdout) console.log(stdout);
      resolve(null);
    });
  });

  // –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ —Å–æ–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
  console.log('üîÑ Fixing import paths in the built server file...');
  
  const serverFilePath = path.join(ROOT_DIR, 'dist', 'index.js');
  let serverContent = await fs.readFile(serverFilePath, 'utf8');
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ shared —Å—Ö–µ–º—ã
  serverContent = serverContent.replace(
    /from\s+["']@shared\/schema["']/g, 
    'from "../shared/schema.js"'
  );
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  await fs.writeFile(serverFilePath, serverContent, 'utf8');
  
  // –®–∞–≥ 3: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ shared –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ dist
  console.log('üìÅ Copying shared directory to dist...');
  
  await fs.mkdir(path.join(ROOT_DIR, 'dist', 'shared'), { recursive: true });
  
  try {
    const schemaContent = await fs.readFile(
      path.join(ROOT_DIR, 'shared', 'schema.ts'), 
      'utf8'
    );
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ TypeScript –≤ JavaScript
    let jsContent = schemaContent
      .replace(/import\s+{([^}]*)}\s+from\s+["']drizzle-orm\/pg-core["'];?/g, 
              'import {$1} from "drizzle-orm/pg-core";')
      .replace(/import\s+{([^}]*)}\s+from\s+["']drizzle-zod["'];?/g, 
              'import {$1} from "drizzle-zod";')
      .replace(/import\s+{([^}]*)}\s+from\s+["']zod["'];?/g, 
              'import {$1} from "zod";')
      .replace(/export\s+type\s+[^{]*{[^}]*};?/g, '') // –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∏–ø–æ–≤
      .replace(/:\s*[a-zA-Z<>[\]]+\s*=/g, ' =') // –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤
      .replace(/:\s*[a-zA-Z<>[\]]+,/g, ',') // –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤ –≤ –æ–±—ä–µ–∫—Ç–∞—Ö
      .replace(/:\s*[a-zA-Z<>[\]]+\)/g, ')'); // –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
      
    await fs.writeFile(
      path.join(ROOT_DIR, 'dist', 'shared', 'schema.js'), 
      jsContent, 
      'utf8'
    );
    
    console.log('‚úÖ Build completed successfully!');
  } catch (error) {
    console.error('‚ùå Error during build:', error);
    process.exit(1);
  }
}

build().catch(console.error);